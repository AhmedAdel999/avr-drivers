
GPIO_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089f  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 93 00 	call	0x126	; 0x126 <main>
  7a:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <gpio_set_pin_mode>:
	*PORT[port] |= (1 << pin);
}

void gpio_clear_pin(u8 port, u8 pin)
{
	*PORT[pin] &= ~(1 << pin);
  82:	44 23       	and	r20, r20
  84:	b1 f0       	breq	.+44     	; 0xb2 <gpio_set_pin_mode+0x30>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	c9 f5       	brne	.+114    	; 0xfc <gpio_set_pin_mode+0x7a>
  8a:	e8 2f       	mov	r30, r24
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	ee 0f       	add	r30, r30
  90:	ff 1f       	adc	r31, r31
  92:	e0 5a       	subi	r30, 0xA0	; 160
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	01 90       	ld	r0, Z+
  98:	f0 81       	ld	r31, Z
  9a:	e0 2d       	mov	r30, r0
  9c:	20 81       	ld	r18, Z
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <gpio_set_pin_mode+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <gpio_set_pin_mode+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	01 90       	ld	r0, Z+
  c0:	f0 81       	ld	r31, Z
  c2:	e0 2d       	mov	r30, r0
  c4:	30 81       	ld	r19, Z
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <gpio_set_pin_mode+0x4e>
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <gpio_set_pin_mode+0x4a>
  d4:	64 2f       	mov	r22, r20
  d6:	60 95       	com	r22
  d8:	36 23       	and	r19, r22
  da:	30 83       	st	Z, r19
  dc:	21 30       	cpi	r18, 0x01	; 1
  de:	71 f4       	brne	.+28     	; 0xfc <gpio_set_pin_mode+0x7a>
  e0:	20 b7       	in	r18, 0x30	; 48
  e2:	2b 7f       	andi	r18, 0xFB	; 251
  e4:	20 bf       	out	0x30, r18	; 48
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	fc 01       	movw	r30, r24
  ec:	e8 59       	subi	r30, 0x98	; 152
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	01 90       	ld	r0, Z+
  f2:	f0 81       	ld	r31, Z
  f4:	e0 2d       	mov	r30, r0
  f6:	80 81       	ld	r24, Z
  f8:	48 2b       	or	r20, r24
  fa:	40 83       	st	Z, r20
  fc:	08 95       	ret

000000fe <gpio_toggle_pin>:
}

void gpio_toggle_pin(u8 port, u8 pin)
{
	*PORT[port] ^= 1 << pin;
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e8 59       	subi	r30, 0x98	; 152
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
 110:	20 81       	ld	r18, Z
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <gpio_toggle_pin+0x1e>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <gpio_toggle_pin+0x1a>
 120:	82 27       	eor	r24, r18
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <main>:
#include "util/delay.h"
#include "GPIO_INTERFACE.h"

int main(void)
{
	gpio_set_pin_mode(GPIOB, GPIO7, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE);
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	67 e0       	ldi	r22, 0x07	; 7
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 41 00 	call	0x82	; 0x82 <gpio_set_pin_mode>
    while(1) 
    {
		gpio_toggle_pin(GPIOB, GPIO7);
 132:	67 e0       	ldi	r22, 0x07	; 7
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 7f 00 	call	0xfe	; 0xfe <gpio_toggle_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f e9       	ldi	r18, 0x9F	; 159
 13c:	86 e8       	ldi	r24, 0x86	; 134
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x24>
 14a:	00 00       	nop
 14c:	f2 cf       	rjmp	.-28     	; 0x132 <main+0xc>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
